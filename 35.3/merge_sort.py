def merge_sort(array):
    # caso base: se j√° atingiu a menor por√ß√£o (1)
    if len(array) <= 1:
        # retorne o array
        return array
    # calculo do pivot: √≠ndice que indica onde o array ser√° particionado
    # no caso, metade
    mid = len(array) // 2
    # para cada metade do array
    # chama a fun√ß√£o merge_sort de forma recursiva
    left, right = merge_sort(array[:mid]), merge_sort(array[mid:])
    # mistura as partes que foram divididas
    return merge(left, right, array.copy())


# fun√ß√£o auxiliar que realiza a mistura dos dois arrays
def merge(left, right, merged):

    left_cursor, right_cursor = 0, 0

    # enquanto nenhumas das partes √© percorrida por completo
    while left_cursor < len(left) and right_cursor < len(right):

        # compare os dois itens das partes e insira no array de mistura o menor
        if left[left_cursor] <= right[right_cursor]:
            merged[left_cursor + right_cursor] = left[left_cursor]
            left_cursor += 1
        else:
            merged[left_cursor + right_cursor] = right[right_cursor]
            right_cursor += 1
    # a itera√ß√£o acima ir√° inserir os elementos de forma ordenada

    # quando uma das partes termina, devemos garantir
    # que a outra sera totalmente inserida no array de mistura

    # itera sobre os elementos restantes na parti√ß√£o "esquerda"
    # inserindo-os no array de mistura
    for left_cursor in range(left_cursor, len(left)):
        merged[left_cursor + right_cursor] = left[left_cursor]

    # itera sobre os elementos restantes na parti√ß√£o "direita"
    # inserindo-os no array de mistura
    for right_cursor in range(right_cursor, len(right)):
        merged[left_cursor + right_cursor] = right[right_cursor]

    return merged


print(merge_sort([100, 4, 6, 33, 56, 67]))


# A separa√ß√£o em partes traz uma complexidade O(log n) , e as misturas O(n) . Com isso, temos uma complexidade de O(n log n) , independente do array estar ordenado por completo, n√£o ordenado, ou parcialmente ordenado.
# Como √© um algoritmo recursivo, consome mais mem√≥ria, possuindo uma complexidade de espa√ßo O(n) , ou seja, cresce linearmente proporcional a entrada de dados.

# Quick Sort
# O quicksort √© um algoritmo que tamb√©m utiliza da t√©cnica de divis√£o e conquista. Sua estrat√©gia de ordena√ß√£o consiste em determinar um elemento piv√¥ (nome dado ao elemento que divide o array em por√ß√µes menores). Em seguida, todos os elementos maiores que o piv√¥ ser√£o colocados a direita e os menores a esquerda. Com isto, o piv√¥ estar√° em sua posi√ß√£o correta e teremos duas sub cole√ß√µes n√£o ordenados ao seu redor. Recursivamente ordenamos os sub arrays, repetindo o mesmo processo de escolha do piv√¥ e particionamento (divis√£o).
# Como funciona o algoritmo?

# Vamos supor os n√∫meros n√£o ordenados
# - cole√ß√£o = 7 1 2 5 4 6 3

# # Faremos a escolha do elemento piv√¥.
# # Este elemento ser√° o respons√°vel por particionar (dividir) a lista.
# # Posso escolher qualquer elemento neste passo e, por isso,
# # vou escolher o elemento do meio
# - pivot = 5

# # Movemos todos os elementos menores para a esquerda e os maiores para a direita (a)
# - 1 2 4 3    5    7 6

# # Precisamos ordenar as cole√ß√µes geradas,
# # come√ßando com a lista de elementos inferiores
# - 1 2 4 3

# # Novamente escolhemos o pivot
# - pivot = 2

# # Novamente fazemos a divis√£o (b)
# - 1    2    4 3

# # A lista √† esquerda j√° n√£o tem como ser particionada,
# # por√©m a da direita ainda pode ser particionada (c)
# - 4 3

# # Escolhendo o piv√¥ e movendo os outros elementos
# # chegaremos a
# - 3    4

# # Agora precisamos o processo de conquista,
# # voltando recursivamente ao passo (c), que pediu para ordenar
# # a sub cole√ß√£o 4 3, temos como resposta
# - 3 4
# # essa resposta, nos faz retornar ao passo (b), onde concatenaremos ao piv√¥ a ordena√ß√£o do lado direito e esquerdo,
# # resultando em
# - 1 2 3 4

# # Vamos agora ver o outro lado do passo (a)
# - 7 6

# # realizando o mesmo processo
# # ap√≥s escolher o piv√¥ e realizar os movimentos teremos
# - 6    7

# # Por fim a resposta √© utilizada l√° no passo (a) para concatenarmos os dois lados
# # e termos por fim a lista ordenada
# - 1 2 3 4 5 6 7

# A anima√ß√£o abaixo ilustra como um algoritmo de ordena√ß√£o por inser√ß√£o funciona: (QUICKSORT)

# Vamos ver um exemplo de implementa√ß√£o:

def quicksort(array, low, high):
    # caso base: se j√° atingiu a menor por√ß√£o (1)
    if len(array) == 1:
        # retorne o array
        return array

    # os √≠ndices ir√£o se cruzar quando o array estiver ordenado
    if low < high:
        # √≠ndice da parti√ß√£o √© o √≠ndice onde o array foi divido
        # e √© determinado a partir do piv√¥.
        # Este √≠ndice j√° est√° ordenado
        partition_index = partition(array, low, high)

        # Ordena os elementos presentes antes da parti√ß√£o (menores que o piv√¥)
        # e depois (maiores que o piv√¥)
        quicksort(array, low, partition_index - 1)
        quicksort(array, partition_index + 1, high)


# fun√ß√£o auxiliar respons√°vel pela parti√ß√£o do array
# escolhendo um piv√¥ e fazendo movimenta√ß√µes dos sub arrays gerados
def partition(array, low, high):
    # √≠ndice do menor elemento
    i = low - 1
    # o piv√¥ ser√° escolhido
    # atrav√©s do √≠ndice que divide o array
    pivot = array[high]  # pivot

    # itera sobre os elementos
    for j in range(low, high):
        print(range(low, high))
        # se o elemento corrente √© menor ou igual ao piv√¥
        if array[j] <= pivot:

            # incrementa o √≠ndice do menor elemento
            i = i + 1
            array[i], array[j] = array[j], array[i]
    array[i + 1], array[high] = array[high], array[i + 1]

    return i + 1


array = [100, 4, 6, 33, 56, 67]
quicksort(array, 0, len(array) - 1)
print(array)

# Normalmente esta ordena√ß√£o ocorre com complexidade O(n log n) , por√©m em um pior caso (onde o array est√° ordenado de forma inversa), ocorrer√° com complexidade O(n¬≤) .
# üí° Curiosidade: Por baixo dos panos, quando voc√™ utiliza a fun√ß√£o sorted padr√£o do python ou faz array.sort , voc√™ est√° utilizando uma ordena√ß√£o chamada TimSort , que √© um algoritmo h√≠brido que mistura o merge sort e insertion sort. √â tamb√©m utilizado pela linguagem Java para ordenar arrays.