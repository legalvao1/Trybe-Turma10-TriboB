# Mailer - Criando mais entidades
# Tudo muito bem, tudo muito bom, mas ainda precisamos criar a l√≥gica de envio de email, certo? N√£o se preocupe, n√≥s fizemos ela para voc√™, mas acompanhe porque √© importante!
# Para codarmos um envio de email vamos usar dois m√≥dulos, o ssl e o smtplib . Ambos nos permitir√£o logar num servidor de emails e, de l√°, fazer um envio de forma segura atrav√©s da rede. Para conseguirmos fazer isso, precisaremos ter em m√£os algumas informa√ß√µes: o email enviador, a senha do email enviador, o email que receber√° a mensagem, o assunto e o corpo do email. Precisamos dessas informa√ß√µes √† disposi√ß√£o, ent√£o vamos colocar elas no nosso construtor para, ent√£o, criar a l√≥gica da nossa a√ß√£o:

import smtplib
import ssl


class User:
    def __init__(self, name, email, password, from_email, from_password):
        self.name = name
        self.email = email
        self.password = password
        self.from_email = from_email
        self.from_password = from_password

    def reset_password(self):
        """ S√≥ com isso a fun√ß√£o n√£o ir√° funcionar! O email em
        quest√£o n√£o existe e costuma ser necess√°rio configurar
        permiss√µes no servidor de email para o envio ocorrer. Se
        quiser, explore isso como exerc√≠cio b√¥nus! (Por seguran√ßa,
        crie uma nova conta de e-mail para testar).
        Por hora, basta entender a l√≥gica aqui! """

        subject = "Reset your password"
        message = "Instru√ß√µes para resetar a senha, com o link de resetar"
        body = f"Subject:{subject}\n\n{message}".encode('utf-8')
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL(
            "smtp.gmail.com", 465, context=context
        ) as server:
            server.login(self.from_email, self.from_password)
            try:
                server.sendmail(self.from_email, self.email, body)
            except (smtplib.SMTPRecipientsRefused, smtplib.SMTPSenderRefused):
                raise ValueError


meu_user = User("Valentino Trocatapa",
                "valentino@tinytoons.com",
                "Grana",
                "password_reset@teste.com",
                "myverysafepassword")
meu_user.reset_password()

# Feitas as devidas configura√ß√µes no servidor do email essa l√≥gica funciona, mas temos um problema s√©rio aqui! Voc√™ sabe dizer qual √©?
# Leia o c√≥digo do final. Estamos criando uma entidade (ali√°s, estamos inst√¢nciando um objeto!) User . Para cri√°-la, estamos passando seu nome, email, senha e... o email de envio de reset de senha e a senha desse email. Se tivermos mil users teremos sempre o mesmo email de reset e a mesma senha! Note como o construtor de User est√° lotado de atribui√ß√µes! E cada inst√¢ncia que criarmos vai ter uma c√≥pia das informa√ß√µes do enviador de emails. Pra qu√™? Pra nada. N√£o precisamos disso.
# Bora arrumar o c√≥digo ent√£o?
# Lembre-se do primeiro pilar de POO, a Abstra√ß√£o ! Se uma l√≥gica parece n√£o pertencer a uma entidade, extraia-a para uma outra entidade, ou para uma entidade nova! Sempre comece por a√≠ para organizar o seu c√≥digo. No nosso caso, que tal criamos um enviador de emails? O nome faz sentido, n√£o faz? O nome mais literal poss√≠vel que podemos dar para uma entidade que envia emails √© Enviador de Emails . Em ingl√™s, Mailer . Ent√£o √© esse o nome que daremos. Bom!
# Ou ainda, pense nas Mensagens . Qual √© mais simples? "User, resete sua senha!" ou "Enviador de emails, resete a senha deste User!" . Ambas s√£o corretas, mas a primeira √© melhor no Encapsulamento . A pessoa que vai usar o seu c√≥digo n√£o precisa saber que, por tr√°s dos panos, h√° uma entidade Mailer trabalhando com voc√™. Na segunda implementa√ß√£o ela precisa saber disso! A primeira alternativa exige que a pessoa saiba menos da sua l√≥gica e, portanto, a encapsula melhor! Sendo assim, nosso exemplo fica assim:
import smtplib
import ssl


class User:
    def __init__(self, name, email, password):
        self.name = name
        self.email = email
        self.password = password

    def reset_password(self):
        meu_mailer = Mailer("password_reset@teste.com", "myverysafepassword", self.email)
        meu_mailer.send_email("Reset your password", "Instru√ß√µes para resetar a senha, com o link de resetar")


class Mailer:
    def __init__(self, from_email, from_password, to_email):
        self.from_email = from_email
        self.from_password = from_password
        self.to_email = to_email

    def send_email(self, subject, message):
        body = f"Subject:{subject}\n\n{message}".encode('utf-8')
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL(
            "smtp.gmail.com", 465, context=context
        ) as server:
            server.login(self.from_email, self.from_password)
            try:
                server.sendmail(self.from_email, self.to_email, body)
            except (smtplib.SMTPRecipientsRefused, smtplib.SMTPSenderRefused):
                raise ValueError


meu_user = User("Valentino Trocatapa", "valentino@tinytoons.com", "Grana")
meu_user.reset_password()
# Assim resolvemos o nosso problema com o m√°ximo de l√≥gica encapsulada. E ao separarmos as nossas entidades , n√≥s deixamos a entidade Mailer, de quebra, muito mais gen√©rica! Ela n√£o precisa enviar s√≥ emails de reset de senha agora. Ela pode enviar quaisquer emails! ü§©

# Mensagens e M√©todos
# Vamos ao √∫ltimo nome do dia! Cada objeto pode receber mensagens. O meu_user.reset_password() , por exemplo, pode ser lido como "Meu user, resete a sua senha!" . Dentro da classe User , definimos a fun√ß√£o reset_password que ir√° conter a l√≥gica de resetar senha. Quando voc√™ manda uma inst√¢ncia de User resetar a senha, essa fun√ß√£o sabe o que deve ser feito.
# Fun√ß√µes que "respondem mensagens" se chamam M√©todos . Usualmente ela ser√° nomeada com um verbo ( 'Reset your password!' vira reset_password , por exemplo).
# No contexto de POO, todas as intera√ß√µes s√£o feitas por troca de mensagens! Isso significa que ou voc√™ envia uma mensagem para um objeto ou voc√™ n√£o faz nada com ele. O bom Encapsulamento faz com que n√≥s s√≥ precisemos saber do nome de uma classe e seus m√©todos para interagir com ela. No Python, mesmo quando voc√™ altera um atributo diretamente, por tr√°s dos panos o que ele faz √© enviar uma mensagem de atualiza√ß√£o para a classe!